#!/usr/bin/zsh

## 
## I run this in the morning and afternoon, out of cron, a few minutes before the notifications are due
##   https://github.com/DubhAd/Home-AssistantConfig/blob/master/automation/train-status.yaml
##   https://github.com/DubhAd/Home-AssistantConfig/blob/master/automation/return-train-status.yaml
##
## This then provides JSON output of the train status, both as a value (to indicate whether the trains are ok, delayed, or cancelled)
##  and as a text string of the next 4 trains.
##
## Change the settings below to suit. You'll note there's two stations for work, this is because where we live and work we've got
##  the option of slightly different routes, which work better for us at the times we're working.
##
## I limit the message to 4 (future) trains to keep the message relevant (and readable)

WORK_DEST=KGX		# Where to get off for work
WORK_SRC=STP		# Where to get on to go home
HOME=ACK		# Where is nearest home
MAX_TRAINS=4		# How many trains to get notified about
## Keys for using TransportAPI - register at https://developer.transportapi.com/
APP_ID=secret
API_KEY=nottelling

################################################################################

BACK_FILE=/data/homeassistant/return-train-status.json
OUT_FILE=/data/homeassistant/train-status.json
#
OUT_STATUS_URL="https://transportapi.com/v3/uk/train/station/${HOME}/live.json?app_id=${APP_ID}&app_key=${API_KEY}&darwin=false&calling_at=${WORK_DEST}&train_status=passenger"
BACK_STATUS_URL="https://transportapi.com/v3/uk/train/station/${WORK_SRC}/live.json?app_id=${APP_ID}&app_key=${API_KEY}&darwin=false&calling_at=${HOME}&train_status=passenger"
TMPDIR=$(mktemp -d)
MASTER_FILE=${TMPDIR}/page.json
LIST=${TMPDIR}/list
TRAINS=${TMPDIR}/train

case ${0:t} in
	train-status-update )
		STATUS_URL="${OUT_STATUS_URL}"
		OUTPUT="${OUT_FILE}"
		;;
	return-train-status-update )
		STATUS_URL="${BACK_STATUS_URL}"
		OUTPUT="${BACK_FILE}"
		;;
esac
	

curl ${STATUS_URL} -o ${MASTER_FILE}
cp ${MASTER_FILE} ${OUTPUT}.raw-data
MASTER_FILE=${OUTPUT}.raw-data

TRAIN_STATUS=0
TRAIN_COUNT=0

RECORDS=$(cat ${MASTER_FILE} | jq .departures.all|grep -c '"mode": "train",')
((RECORDS--))
NOW="$(date +'%H:%M' --date='5 minutes')"
for TRAIN in $(seq 0 ${RECORDS})
	do
	SCHEDULED=$(cat ${MASTER_FILE} | jq -r ".departures.all[${TRAIN}].aimed_departure_time")
	STATUS=$(cat ${MASTER_FILE} | jq -r ".departures.all[${TRAIN}].status")
	STATUS_MESSAGE="${STATUS:l}"
	DUE=$(cat ${MASTER_FILE} | jq -r ".departures.all[${TRAIN}].expected_departure_time")

	if [ ${NOW[1,2]} -gt ${DUE[1,2]} ]; then
		# In the past, skip it
		echo "That train is in the past"
		continue
	elif [ ${NOW[1,2]} -eq ${DUE[1,2]} ]; then
		if [ ${NOW[4,5]} -gt ${DUE[4,5]} ]; then
			# In the past, skip it
			echo "That train is in the past too"
			continue
		fi
	fi

	echo "Using this train, which is ${STATUS}, scheduled at ${SCHEDULED}, due ${DUE}"

	((TRAIN_COUNT++))

#	if [ "${SCHEDULED}" = "${DUE}" ]; then
#		# On time
#		[[ -z "${TRAIN_STATUS}" ]] && TRAIN_STATUS=0
#		MESSAGE="${MESSAGE}The ${SCHEDULED} is on time. "
#		echo "Train is due when scheduled"
#	else
		case ${STATUS} in
			"ON TIME" )	MESSAGE="${MESSAGE}The ${SCHEDULED} is ${STATUS_MESSAGE}. "
				;;
			EARLY|ARRIVED|"STARTS HERE" )	MESSAGE="${MESSAGE}The ${SCHEDULED} is ${STATUS_MESSAGE} (due ${DUE}). "
				;;
			LATE|REINST*|CHANGE* ) [[ ${TRAIN_STATUS} -ne 2 ]] && TRAIN_STATUS=1
				MESSAGE="${MESSAGE}The ${SCHEDULED} is ${STATUS_MESSAGE} (due ${DUE}). "
				;;
			CANCELLED|"OFF ROUTE"|"NO REPORT" ) TRAIN_STATUS=2
				MESSAGE="${MESSAGE}The ${SCHEDULED} is ${STATUS_MESSAGE}. "
				;;
		esac
#	fi

	if [ ${TRAIN_COUNT} -eq ${MAX_TRAINS} ]; then
		break
	fi
done

rm -fr ${TMPDIR}

if [ -z "${MESSAGE}" ]; then
	TRAIN_STATUS=42
fi
echo "${TRAIN_STATUS}: ${MESSAGE:-all is lost}"
#exit

case ${TRAIN_STATUS} in
	0 )	cat << EOM > ${OUTPUT}
{ "status":0, "message":"Good - no problems on the trains." }
EOM
		;;
	1 )	cat << EOM > ${OUTPUT}
{ "status":1, "message":"Issues on the trains. ${MESSAGE}" }
EOM
		;;
	2 )	cat << EOM > ${OUTPUT}
{ "status":1, "message":"Cancellations of the trains. ${MESSAGE}" }
EOM
		;;
	* )	cat << EOM > ${OUTPUT}
{ "status":1, "message":"No idea about the trains, sorry." }
EOM
		;;
esac
